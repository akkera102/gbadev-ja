
Discarded input sections

 .text          0x00000000        0x0 obj/font_ascii.o
 .data          0x00000000        0x0 obj/font_ascii.o
 .bss           0x00000000        0x0 obj/font_ascii.o
 .text          0x00000000        0x0 obj/crt0.o
 .data          0x00000000        0x0 obj/crt0.o
 .bss           0x00000000        0x0 obj/crt0.o
 .text          0x00000000        0x0 obj/div.o
 .data          0x00000000        0x0 obj/div.o
 .bss           0x00000000        0x0 obj/div.o
 .text          0x00000000        0x0 obj/common.o
 .data          0x00000000        0x0 obj/common.o
 .bss           0x00000000        0x0 obj/common.o
 .text          0x00000000        0x0 obj/gbfs.o
 .data          0x00000000        0x0 obj/gbfs.o
 .bss           0x00000000        0xc obj/gbfs.o
 .rodata.str1.4
                0x00000000       0xb0 obj/gbfs.o
 .ewram         0x00000000       0xc8 obj/gbfs.o
 .iwram         0x00000000      0x1c0 obj/gbfs.o
 .comment       0x00000000       0x24 obj/gbfs.o
 .text          0x00000000        0x0 obj/sys_arm.o
 .data          0x00000000        0x0 obj/sys_arm.o
 .bss           0x00000000        0x0 obj/sys_arm.o
 .iwram         0x00000000       0x10 obj/sys_arm.o
 .comment       0x00000000       0x24 obj/sys_arm.o
 .text          0x00000000        0x0 obj/bg.o
 .data          0x00000000        0x0 obj/bg.o
 .text          0x00000000        0x0 obj/irq.arm.o
 .data          0x00000000        0x0 obj/irq.arm.o
 .bss           0x00000000        0x0 obj/irq.arm.o
 .text          0x00000000        0x0 obj/key.o
 .data          0x00000000        0x0 obj/key.o
 .text          0x00000000        0x0 obj/main.o
 .data          0x00000000        0x0 obj/main.o
 .bss           0x00000000        0x0 obj/main.o
 .text          0x00000000        0x0 obj/rtc.o
 .data          0x00000000        0x0 obj/rtc.o

Memory Configuration

Name             Origin             Length             Attributes
rom              0x08000000         0x02000000
iwram            0x03000000         0x00008000
ewram            0x02000000         0x00040000
*default*        0x00000000         0xffffffff

Linker script and memory map

                0x08000000                        __text_start = ORIGIN (rom)
                0x02040000                        __eheap_end = (ORIGIN (ewram) + LENGTH (ewram))
                0x03000000                        __iwram_start = ORIGIN (iwram)
                0x03008000                        __iwram_top = (ORIGIN (iwram) + LENGTH (iwram))
                0x03007fa0                        __sp_irq = (__iwram_top - 0x60)
                0x03007f00                        __sp_usr = (__sp_irq - 0xa0)
                0x03007ff8                        __irq_flags = 0x3007ff8
                0x08000000                        . = __text_start

.crt0           0x08000000      0x1f8
 *(.crt0)
 .crt0          0x08000000      0x1f8 obj/crt0.o
                0x08000000                _start
                0x080000c4                __boot_method
                0x080000c5                __slave_number
                0x080000e0                start_vector
                0x080001f8                        . = ALIGN (0x4)

.init
 *(SORT_NONE(.init))

.plt            0x080001f8        0x0
 *(.plt)
                0x080001f8                        . = ALIGN (0x4)

.text           0x080001f8        0x0
 *(EXCLUDE_FILE(*.iwram*) .text*)
 *(.gnu.linkonce.t.*)
 *(.text.*personality*)
 *(.gnu.warning)
 *(.glue_7t)
 .glue_7t       0x080001f8        0x0 linker stubs
 *(.glue_7)
 .glue_7        0x080001f8        0x0 linker stubs
 *(.vfp11_veneer)
 .vfp11_veneer  0x080001f8        0x0 linker stubs
                0x080001f8                        . = ALIGN (0x4)
                0x080001f8                        __text_end = .

.v4_bx          0x080001f8        0x0
 .v4_bx         0x080001f8        0x0 linker stubs

.iplt           0x080001f8        0x0
 .iplt          0x080001f8        0x0 obj/crt0.o

.fini           0x080001f8        0x0
 *(.fini)
                0x080001f8                        . = ALIGN (0x4)

.rodata         0x080001f8     0x41c0
 *(.rodata)
 .rodata        0x080001f8     0x4020 obj/font_ascii.o
                0x080001f8                font_asciiTiles
                0x080041f8                font_asciiPal
 .rodata        0x08004218      0x108 obj/common.o
 .rodata        0x08004320       0x1c obj/rtc.o
                0x08004320                week
 *all.rodata*(*)
 *(.roda)
 *(.rodata.*)
 .rodata.str1.4
                0x0800433c       0x79 obj/rtc.o
 *(.gnu.linkonce.r*)
                0x080043b8                        . = ALIGN (0x4)
 *fill*         0x080043b5        0x3 ff

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x080043b8                        __exidx_start = .

.ARM.exidx
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x080043b8                        __exidx_end = .

.ctors          0x080043b8        0x0
 *crtbegin.o(.ctors)
 *(EXCLUDE_FILE(*crtend.o) .ctors)
 *(SORT_BY_NAME(.ctors.*))
 *(.ctors)
                0x080043b8                        . = ALIGN (0x4)

.dtors          0x080043b8        0x0
 *crtbegin.o(.dtors)
 *(EXCLUDE_FILE(*crtend.o) .dtors)
 *(SORT_BY_NAME(.dtors.*))
 *(.dtors)
                0x080043b8                        . = ALIGN (0x4)

.eh_frame       0x080043b8        0x0
 *(.eh_frame)
                0x080043b8                        . = ALIGN (0x4)

.gcc_except_table
                0x080043b8        0x0
 *(.gcc_except_table)
                0x080043b8                        . = ALIGN (0x4)
                0x080043b8                        __iwram_lma = .

.iwram          0x03000000      0x778 load address 0x080043b8
                0x03000000                        __iwram_start__ = ABSOLUTE (.)
 *(.iwram .iwram*)
 .iwram         0x03000000       0x10 obj/div.o
                0x03000000                Div
                0x03000004                Mod
                0x0300000a                Abs
 .iwram         0x03000010      0x5c4 obj/common.o
                0x03000010                _SprintfNum
                0x030000a4                _SprintfNumCol
                0x03000194                _SprintfHex
                0x0300020c                _SprintfHexCol
                0x030002e0                _DoSprintf
                0x03000558                _Sprintf
                0x03000570                _Printf
                0x03000594                _SprintfString
                0x030005a8                SystemError
                0x030005c4                mappylog
 .iwram         0x030005d4       0x78 obj/bg.o
                0x030005d4                BgDrawStr
                0x030005fc                BgDrawPrintf
 .iwram         0x0300064c       0x40 obj/irq.arm.o
                0x0300064c                IrqHandler
 .iwram         0x0300068c       0x94 obj/key.o
                0x0300068c                KeyExec
                0x030006f0                KeyGetCnt
                0x030006fc                KeyGetTrg
                0x03000708                KeyGetOff
                0x03000714                KeyGetRep
 .iwram         0x03000720       0x58 obj/main.o
                0x03000720                main
 *iwram.*(.text* .data*)
                0x03000778                        . = ALIGN (0x4)
                0x03000778                        __iwram_end__ = ABSOLUTE (.)
                0x08004b30                        __data_lma = (__iwram_lma + SIZEOF (.iwram))

.bss            0x03000778       0x54
                0x03000778                        __bss_start = ABSOLUTE (.)
                0x03000778                        __bss_start__ = ABSOLUTE (.)
 *(.dynbss)
 *(.gnu.linkonce.b*)
 *(.bss*)
 .bss           0x03000778       0x40 obj/bg.o
                0x03000778                Bg
 .bss           0x030007b8        0xa obj/key.o
                0x030007b8                Key
 *fill*         0x030007c2        0x2 
 .bss           0x030007c4        0x8 obj/rtc.o
                0x030007c4                Rtc
 *(COMMON)
                0x030007cc                        . = ALIGN (0x4)
                0x030007cc                        __bss_end__ = ABSOLUTE (.)

.data           0x030007cc        0x0 load address 0x08004b30
                0x030007cc                        __data_start__ = ABSOLUTE (.)
 *(.data*)
 *(.gnu.linkonce.d*)
                0x030007cc                        . = ALIGN (0x4)
                0x08004b30                        __preinit_lma = (__data_lma + SIZEOF (.data))

.igot.plt       0x03000778        0x0 load address 0x08004b30
 .igot.plt      0x03000778        0x0 obj/crt0.o

.preinit_array  0x030007cc        0x0 load address 0x08004b30
                0x030007cc                        __preinit_array_start = ABSOLUTE (.)
 *(.preinit_array)
                0x030007cc                        __preinit_array_end = ABSOLUTE (.)
                0x08004b30                        __init_lma = (__preinit_lma + SIZEOF (.preinit_array))

.init_array     0x030007cc        0x0 load address 0x08004b30
                0x030007cc                        __init_array_start = ABSOLUTE (.)
 *(SORT_BY_NAME(.init_array.*))
 *(.init_array)
                0x030007cc                        __init_array_end = ABSOLUTE (.)
                0x08004b30                        __fini_lma = (__init_lma + SIZEOF (.init_array))

.fini_array     0x030007cc        0x0 load address 0x08004b30
                0x030007cc                        __fini_array_start = ABSOLUTE (.)
 *(SORT_BY_NAME(.fini_array.*))
 *(.fini_array)
                0x030007cc                        __fini_array_end = ABSOLUTE (.)
                0x08004b30                        __jcr_lma = (__fini_lma + SIZEOF (.fini_array))

.jcr
 *(.jcr)
                0x030007cc                        __data_end__ = ABSOLUTE (.)
                0x08004b30                        __iwram_overlay_lma = (__jcr_lma + SIZEOF (.jcr))
                0x030007cc                        __iwram_overlay_start = .

.iwram0         0x030007cc        0x0 load address 0x08004b30
 *(.iwram0)
                0x030007cc                        . = ALIGN (0x4)
                0x08004b30                        PROVIDE (__load_start_iwram0 = LOADADDR (.iwram0))
                0x08004b30                        PROVIDE (__load_stop_iwram0 = (LOADADDR (.iwram0) + SIZEOF (.iwram0)))

.iwram1         0x030007cc        0x0
 *(.iwram1)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram1 = LOADADDR (.iwram1))
                [!provide]                        PROVIDE (__load_stop_iwram1 = (LOADADDR (.iwram1) + SIZEOF (.iwram1)))

.iwram2         0x030007cc        0x0
 *(.iwram2)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram2 = LOADADDR (.iwram2))
                [!provide]                        PROVIDE (__load_stop_iwram2 = (LOADADDR (.iwram2) + SIZEOF (.iwram2)))

.iwram3         0x030007cc        0x0
 *(.iwram3)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram3 = LOADADDR (.iwram3))
                [!provide]                        PROVIDE (__load_stop_iwram3 = (LOADADDR (.iwram3) + SIZEOF (.iwram3)))

.iwram4         0x030007cc        0x0
 *(.iwram4)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram4 = LOADADDR (.iwram4))
                [!provide]                        PROVIDE (__load_stop_iwram4 = (LOADADDR (.iwram4) + SIZEOF (.iwram4)))

.iwram5         0x030007cc        0x0
 *(.iwram5)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram5 = LOADADDR (.iwram5))
                [!provide]                        PROVIDE (__load_stop_iwram5 = (LOADADDR (.iwram5) + SIZEOF (.iwram5)))

.iwram6         0x030007cc        0x0
 *(.iwram6)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram6 = LOADADDR (.iwram6))
                [!provide]                        PROVIDE (__load_stop_iwram6 = (LOADADDR (.iwram6) + SIZEOF (.iwram6)))

.iwram7         0x030007cc        0x0
 *(.iwram7)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram7 = LOADADDR (.iwram7))
                [!provide]                        PROVIDE (__load_stop_iwram7 = (LOADADDR (.iwram7) + SIZEOF (.iwram7)))

.iwram8         0x030007cc        0x0
 *(.iwram8)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram8 = LOADADDR (.iwram8))
                [!provide]                        PROVIDE (__load_stop_iwram8 = (LOADADDR (.iwram8) + SIZEOF (.iwram8)))

.iwram9         0x030007cc        0x0
 *(.iwram9)
                0x030007cc                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram9 = LOADADDR (.iwram9))
                [!provide]                        PROVIDE (__load_stop_iwram9 = (LOADADDR (.iwram9) + SIZEOF (.iwram9)))
                0x030007cc                        __iwram_overlay_end = .
                0x08004b30                        __ewram_lma = (__iwram_overlay_lma + (__iwram_overlay_end - __iwram_overlay_start))
                0x030007cc                        __iheap_start = .
                0x02000000                        __ewram_start = ORIGIN (ewram)

.ewram          0x02000000      0xa30 load address 0x08004b30
 *(.ewram*)
 .ewram         0x02000000      0x178 obj/common.o
                0x02000000                _Strlen
                0x02000018                _Strncpy
                0x0200005c                _Strncmp
                0x0200009c                _Strcat
                0x020000bc                _Strchr
                0x020000d0                _Memcpy
                0x02000134                _Memcmp
                0x0200015c                _Memset
 .ewram         0x02000178      0x15c obj/bg.o
                0x02000178                BgInitLcd
                0x020001d4                BgInit
                0x02000264                Bg0Init
 .ewram         0x020002d4       0x48 obj/irq.arm.o
                0x020002d4                IrqInit
 .ewram         0x0200031c       0x20 obj/key.o
                0x0200031c                KeyInit
 .ewram         0x0200033c      0x6f4 obj/rtc.o
                0x0200033c                RtcInit
                0x020003ec                RtcGetTime
                0x020004f0                RtcSetTime
                0x02000640                RtcExec
                0x020007f0                RtcIn
                0x0200088c                RtcOutCmd
                0x02000960                RtcOutReg
                0x02000a30                        . = ALIGN (0x4)
                0x02000a30                        __ewram_end = ABSOLUTE (.)
                0x08005560                        __pad_lma = (__ewram_lma + SIZEOF (.ewram))

.sbss           0x02000a30        0x0
                0x02000a30                        __sbss_start__ = ABSOLUTE (.)
 *(.sbss*)
                0x02000a30                        . = ALIGN (0x4)
                0x02000a30                        __sbss_end__ = ABSOLUTE (.)
                0x02000a30                        __end__ = ABSOLUTE (.)
                0x02000a30                        __eheap_start = ABSOLUTE (.)

.pad            0x02000a30        0x8 load address 0x08005560
                0x02000a30        0x4 LONG 0x52416b64
                0x02000a34        0x4 LONG 0x4d
                0x02000a38                        . = ALIGN (0x4)
                0x08005568                        __rom_end__ = (__pad_lma + SIZEOF (.pad))

.rel.dyn        0x02000a38        0x0 load address 0x08005568
 .rel.iplt      0x02000a38        0x0 obj/crt0.o

.stab
 *(.stab)

.stabstr
 *(.stabstr)

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x00000000       0x23
 *(.comment)
 .comment       0x00000000       0x23 obj/common.o
                                 0x24 (size before relaxing)
 .comment       0x00000023       0x24 obj/bg.o
 .comment       0x00000023       0x24 obj/irq.arm.o
 .comment       0x00000023       0x24 obj/key.o
 .comment       0x00000023       0x24 obj/main.o
 .comment       0x00000023       0x24 obj/rtc.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.stack          0x00080000        0x0
                0x00080000                        _stack = .
 *(.stack)

.note.gnu.arm.ident
 *(.note.gnu.arm.ident)

.ARM.attributes
                0x00000000       0x2c
 *(.ARM.attributes)
 .ARM.attributes
                0x00000000       0x14 obj/font_ascii.o
 .ARM.attributes
                0x00000014       0x20 obj/crt0.o
 .ARM.attributes
                0x00000034       0x14 obj/div.o
 .ARM.attributes
                0x00000048       0x2a obj/common.o
 .ARM.attributes
                0x00000072       0x2a obj/gbfs.o
 .ARM.attributes
                0x0000009c       0x2a obj/sys_arm.o
 .ARM.attributes
                0x000000c6       0x2a obj/bg.o
 .ARM.attributes
                0x000000f0       0x2a obj/irq.arm.o
 .ARM.attributes
                0x0000011a       0x2a obj/key.o
 .ARM.attributes
                0x00000144       0x2a obj/main.o
 .ARM.attributes
                0x0000016e       0x2a obj/rtc.o

/DISCARD/
 *(.note.GNU-stack)
LOAD obj/font_ascii.o
LOAD obj/crt0.o
LOAD obj/div.o
LOAD obj/common.o
LOAD obj/gbfs.o
LOAD obj/sys_arm.o
LOAD obj/bg.o
LOAD obj/irq.arm.o
LOAD obj/key.o
LOAD obj/main.o
LOAD obj/rtc.o
LOAD c:/devkitpro/devkitarm/bin/../lib/gcc/arm-none-eabi/12.2.0/../../../../arm-none-eabi/lib\libstdc++.a
LOAD c:/devkitpro/devkitarm/bin/../lib/gcc/arm-none-eabi/12.2.0/../../../../arm-none-eabi/lib\libstdc++.a
LOAD c:/devkitpro/devkitarm/bin/../lib/gcc/arm-none-eabi/12.2.0/../../../../arm-none-eabi/lib\libm.a
START GROUP
LOAD c:/devkitpro/devkitarm/bin/../lib/gcc/arm-none-eabi/12.2.0\libgcc.a
LOAD c:/devkitpro/devkitarm/bin/../lib/gcc/arm-none-eabi/12.2.0/../../../../arm-none-eabi/lib\libc.a
LOAD c:/devkitpro/devkitarm/bin/../lib/gcc/arm-none-eabi/12.2.0/../../../../arm-none-eabi/lib\libsysbase.a
END GROUP
OUTPUT(test.elf elf32-littlearm)
LOAD linker stubs
